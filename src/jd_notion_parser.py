# -*- coding: utf-8 -*-
"""JD-Notion Parser.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d1-yib6YK9tveo996hZSLVxO-2H_QZtA
"""

!pip install notion
!pip install openai
!pip install requests

import openai
import requests
import json

# Function to summarize text using GPT-3.5
def summarize_text_with_gpt35(text, api_key):
    openai.api_key = api_key
    response = openai.Completion.create(
        engine="text-davinci-002",
        prompt=f"""Please extract the following details from the job description below:Job Description:
                    {text}

                    Job Title:
                    Years of Work Experience Required:
                    Keywords:
                    Tools Needed:
                    Technologies Needed:
                    Company Name:
                    Job Location:
                    Industry:
                    Salary Range:
                    Education Level:
                    Job Type:
                    Application Deadline:

                    Make sure to clearly identify each field so that it can be easily parsed into a JSON payload for a database.""",
        temperature=0.5,
        max_tokens=1000
    )
    summarized_text = response.choices[0].text.strip()
    return summarized_text

def parse_summarized_text(summarized_text):
    lines = summarized_text.split('\n')
    parsed_data = {}
    current_field = ""
    for line in lines:
        # Try to find ':' in the line
        if ':' in line:
            field, value = line.split(':', 1)  # Split only at the first ':'
            field = field.strip()
            value = value.strip()
            parsed_data[field] = value
            current_field = field  # Store the current field name
        else:
            # If ':' is not found, this line is a continuation of the previous field's value
            if current_field:
                parsed_data[current_field] += " " + line.strip()  # Append to the last known field

    return parsed_data

def insert_into_notion(data, notion_api_key, database_id):
    url = f"https://api.notion.com/v1/pages"
    headers = {
        "Authorization": f"Bearer {notion_api_key}",
        "Notion-Version": "2021-08-16",
        "Content-Type": "application/json"
    }
    payload = {
        "parent": {"database_id": database_id},
        "properties": {}
    }

    for key, value in data.items():
        # Use "title" type for "Job Post" and "rich_text" for all other fields
        field_type = "title" if key == "Job Title" else "rich_text"
        payload["properties"][key] = {
            "type": field_type,
            field_type: [{"text": {"content": value}}]
        }

    print("Sending the following payload:")
    print(json.dumps(payload, indent=4))

    response = requests.post(url, headers=headers, json=payload)

    print("Received the following response:")
    print(response.text)

    if response.status_code == 200:
        return json.loads(response.text)
    else:
        raise Exception(f"Failed to insert data into Notion: {response.text}")

# Main function
def main():
    # API keys and database ID
    openai_api_key = "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"
    notion_api_key = "secret_uKSFFPco2C0ZT9yzZXSCN2GbDdShpEOkfjYNd6bEzIe"
    database_id = "6ad8aedf97634b94b79ecc0943398158"

    # Ask the user for the job description
    job_description = input("Please enter the job description: ")

    # Summarize the job description using GPT-3.5
    summarized_text = summarize_text_with_gpt35(job_description, openai_api_key)
    print(summarized_text)
    parsed_data = parse_summarized_text(summarized_text)
    print("Parsed Data:", parsed_data)
    '''# Parse the summarized text to extract details
    lines = summarized_text.split("\n")
    data = {}
    for line in lines:
        parts = line.split(":")
        if len(parts) == 2:
            key = parts[0].split(".")[1].strip()
            value = parts[1].strip()
            data[key] = value
    '''
    # Insert the parsed details into the Notion database
    response = insert_into_notion(parsed_data, notion_api_key, database_id)
    print("Data successfully inserted into Notion:", response)

if __name__ == "__main__":
    main()

